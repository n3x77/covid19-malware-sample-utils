package main

import (
	"encoding/json"
	"flag"
	"net/http"
	"net/url"
	"os"

	log "github.com/sirupsen/logrus"
)

//MalwareBazaarCollector holds the URL and the api token
type MalwareBazaarCollector struct {
	URL   string
	Token string
}

// TagResponse holds the response from the get_taginfo endpoint of malwarebazaar
type TagResponse struct {
	QueryStatus string        `json:"query_status"`
	Data        []SampleEntry `json:"data"`
}

// SampleEntry single sample response from the get_taginfo endpoint api
type SampleEntry struct {
	SHA256       string   `json:"sha256_hash"`
	SHA1         string   `json:"sha1_hash"`
	MD5          string   `json:"md5_hash"`
	FirstSeen    string   `json:"first_seen"`
	LastSeen     string   `json:"last_seen"`
	FileName     string   `json:"file_name"`
	FileSize     int      `json:"file_size"`
	FileTypeMime string   `json:"file_type_mime"`
	FileType     string   `json:"file_type"`
	Reporter     string   `json:"reporter"`
	Anonymous    int      `json:"anonymous"`
	Signature    string   `json:"signature"`
	ImpHash      string   `json:"imphash"`
	SSDeep       string   `json:"ssdeep"`
	Tags         []string `json:"tags"`
	Intelligence []string `json:"intelligence"`
}

// Init initializes the MalwareBazaar Collector endpoint
func Init() *MalwareBazaarCollector {
	noMalwareBazaar := flag.Bool("no-mwb", false, "Do not use Malware Bazaar")
	c := &MalwareBazaarCollector{
		URL:   "https://mb-api.abuse.ch/api/v1/",
		Token: os.Getenv("MWB_TOKEN"),
	}
	if *noMalwareBazaar {
		log.Info("MalwareBazaar collector disabled.")
		return c
	} else {
		log.Debug("Using MalwareBazaar Collector with token: ", c.URL, c.Token)
		return c
	}
}

// GetTag uses the get_taginfo api endpoint and retrieves latest 1000 tagged
// samples
func GetTag(c *MalwareBazaarCollector, t string) {

	var r TagResponse
	formData := url.Values{
		"query": {"get_taginfo"},
		"tag":   {t},
	}

	resp, err := http.PostForm(c.URL, formData)
	if err != nil {
		log.Error(err)
	}
	defer resp.Body.Close()
	json.NewDecoder(resp.Body).Decode(&r)
	if err != nil {
		log.Error(err)
	}
	if resp.StatusCode != http.StatusOK {
		log.Warnf("received status %v, stopping", resp.Status)
	}
	if resp.ContentLength == 1 {
		log.Debug("Error response = 1")
	}
	log.Debug("response Status:", resp.Status)
}

// QueryMalwareBazaar api
func QueryMalwareBazaar() {
	log.Debug("Querying Malware Bazaar...")
	c := Init()
	GetTag(c, "COVID-19")
}
